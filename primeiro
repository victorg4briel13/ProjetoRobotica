//ultima edição 22/11 00h06
#include <VarSpeedServo.h>  //biblioteca para controle da velocidade e da posição dos servos

//servos
#define servoBase A0
#define servoAngulo A1
#define servoAltura A2
#define servoGarra A3

const int velocidade = 25;

//motor
#define M1 5 // Pino_Velocidade 1º Motor ( 0 a 255)_ Porta IN2 ponte H;
#define M2 7 //Pino_Velocidade 2º Motor ( 0 a 255) _ Porta IN4 ponte H;
#define dir1 4 //Pino_Direção do 1º Motor: Para frente / Para trás (HIGH ou LOW)_ porta IN1 ponte H;
#define dir2 6 //Pino_Direção do 2º Motor: Para frente / Para trás (HIGH ou LOW)_ porta IN3 ponte H;

//controle
#define FORWARD 'F'
#define BACKWARD 'B'
#define LEFT 'L'
#define RIGHT 'R'
#define CIRCLE 'C'
#define CROSS 'X'
#define TRIANGLE 'T'
#define SQUARE 'S'
#define START 'A'
#define PAUSE 'P'

//variável responsável por controlar a velocidade dos motores
int vel = 200;//150

int mode = 0;

void setup() {
  Serial.begin(9600);  // Set the baud rate for serial communication
  
  //Setamos os pinos de controle dos motores como saída
  pinMode(M1, OUTPUT);
  pinMode(M2, OUTPUT);
  pinMode(dir1, OUTPUT);
  pinMode(dir2, OUTPUT);

  //Setamos a direção inicial do motor como 0, isso fará com que ambos os motores girem para frente
  digitalWrite(dir1, LOW);
  digitalWrite(dir2, LOW);
}

void loop() {
  //recebe os comandos via bluetooth/monitor serial e chama as funções
  if (Serial.available()) {
    char command = Serial.read();
    executeCommand(command);
  }
};

void executeCommand(char command) {
  switch (command) {
      case START:
        if (mode == 0){
          mode = 1;
          Serial.println("mode 1");
        }else if(mode == 1){
          mode = 0;
          Serial.println("mode 0");
        }
      break;

      case PAUSE:
        analogWrite(M1, 0); 
        analogWrite(M2, 0);
        Serial.println("pause");
      break;

      default:
      // Invalid command received
      break;
    }

    //carro
    if (mode == 0) {
      switch (command) {
        case FORWARD:
          frente();
        break;

        case BACKWARD:
          tras();
        break;

        case LEFT:
          esquerda();
        break;

        case RIGHT:
          direita();
        break;

        case CIRCLE:
          Serial.println("gordo");
        break;

        case CROSS:
          Serial.println("X");
        break;

        case TRIANGLE:
          Serial.println("triangulo");
        break;

        case SQUARE:
          Serial.println("caixinha");
        break;

        default:
        // Invalid command received
        break;
      }
    } 

    //modo 1
    else if (mode == 1){
      switch (command) {
        case FORWARD:
          frente();
        break;
    
        case BACKWARD:
          tras();
        break;

        case LEFT:
          esquerda();
        break;

        case RIGHT:
          direita();
        break;

        case CIRCLE:
          // Perform action for circle
          Serial.println("gordo2");
        break;

        case CROSS:
          // Perform action for immediate stop or crossing
          Serial.println("X2");
        break;

        case TRIANGLE:
          // Perform action for toggling a state (e.g., LED on/off)
          Serial.println("triangulo2");
        break;

        case SQUARE:
          // Perform action for retrieving and sending status information
          Serial.println("caixinha2");
        break;

        default:
          // Invalid command received
        break;
      }
    }
}

void frente(){
  //andar para frente  
  Serial.println("frente");
  digitalWrite(dir1, LOW); // Ambos os motores são setados para ir para frente
  digitalWrite(dir2, LOW);
  analogWrite(M1, vel); // Ambos motores ligam na mesma velocidade
  analogWrite(M2, vel);
}

void tras(){
  //andar para trás
  Serial.println("trás");
  digitalWrite(dir1, HIGH); // Ambos os motores são setados para ir para trás
  digitalWrite(dir2, HIGH);
  analogWrite(M1, vel); // Ambos motores ligam na mesma velocidade
  analogWrite(M2, vel);
}

void esquerda(){
  // virar a esquerda
  digitalWrite(dir1, HIGH); // Um dos motores fica setados para ir para trás
  digitalWrite(dir2, LOW);
  analogWrite(M1, vel); // O motor 1 desliga
  analogWrite(M2, vel); // O motor 2 fica ligado, fazendo assim o carrinho virar
}

void direita(){
  // virar a direita
  digitalWrite(dir1, LOW); // Um dos motores fica setados para ir para trás
  digitalWrite(dir2, HIGH);
  analogWrite(M1, vel); //O motor 1 fica ligado
  analogWrite(M2, vel); // O motor 2 desliga, fazendo assim o carrinho virar no outro sentido
}

void abrirGarra(){}
void fechaGarra(){}
